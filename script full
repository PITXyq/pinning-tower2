local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local TARGET_PART_NAME_Q = "사라지는 파트"
local TELEPORT_DURATION_Q = 0.1
local TRIGGER_KEY_Q = Enum.KeyCode.Q

local TARGET_PART_NAME_E = "Gudock"
local TELEPORT_DURATION_E = 0.1
local TRIGGER_KEY_E = Enum.KeyCode.E

local TRIGGER_KEY_R = Enum.KeyCode.R
local TARGET_POSITION_R = Vector3.new(-76.9988251, 147.146271, -75.000618)

local TRIGGER_KEY_F = Enum.KeyCode.F
local ANTI_FALL_Y_THRESHOLD = TARGET_POSITION_R.Y - 50
local ANTI_FALL_COOLDOWN = 1

local TRIGGER_KEY_G = Enum.KeyCode.G
local DETECT_POSITION_G = Vector3.new(-41.8089943, 147.146271, -80.9691467)
local TARGET_POSITION_G = Vector3.new(-41.8089943, 147.146271 - 7, -80.9691467)
local DETECTION_RADIUS_G = 5
local PLAYER_DETECT_COOLDOWN_G = 0.5

local TRIGGER_KEY_H = Enum.KeyCode.H
local TARGET_POSITION_H = Vector3.new(-78.8984604, 147.146271, -39.3039017)
local DETECTION_RADIUS_H = 15
local PLAYER_DETECT_COOLDOWN_H = PLAYER_DETECT_COOLDOWN_G

local TRIGGER_KEY_FLY = Enum.KeyCode.X
local FLYING = false
local QEfly = true
local iyflyspeed = 1
local vehicleflyspeed = 1
local flyKeyDownConnection = nil
local flyKeyUpConnection = nil
local flyRenderStepConnection = nil
local flyCharacterAddedConnection = nil

local TRIGGER_KEY_PLATFORM = Enum.KeyCode.P
local PLATFORM_SIZE = Vector3.new(200, 5, 200)
local PLATFORM_COLOR = Color3.fromRGB(100, 200, 255)
local PLATFORM_TRANSPARENCY_VISIBLE = 0.5
local PLATFORM_TRANSPARENCY_HIDDEN = 1
local PLATFORM_ANCHORED = true
local PLATFORM_CAN_COLLIDE = true
local isPlatformVisible = false
local platformPartRef = nil

local isPartTeleporting = false
local originalStateData = {}
local isAntiFallEnabled = false
local lastAntiFallTime = 0
local isGFuncEnabled = false
local lastPlayerDetectTime_G = 0
local isHFuncEnabled = false
local lastPlayerDetectTime_H = 0

local antiFallButtonRef = nil
local gFuncButtonRef = nil
local hFuncButtonRef = nil
local flyButtonRef = nil
local platformButtonRef = nil
local uiToggleButtonRef = nil
local antiFallStatusLabelRef = nil
local gFuncStatusLabelRef = nil
local hFuncStatusLabelRef = nil
local flyStatusLabelRef = nil
local platformStatusLabelRef = nil
local keybindsLabelRef = nil
local gVisualizerPartRef = nil
local hVisualizerPartRef = nil

local function setVisibilityRecursive(instance, visible, stateStore)
	if not instance then return end
	local originalProps = {}
	if instance:IsA("BasePart") then
		originalProps.Transparency = instance.Transparency
		instance.Transparency = visible and originalProps.Transparency or 1
	end
	if instance:IsA("Decal") or instance:IsA("Texture") then
		originalProps.Transparency = instance.Transparency
		instance.Transparency = visible and originalProps.Transparency or 1
	end
	if instance:IsA("SurfaceGui") or instance:IsA("ParticleEmitter") or instance:IsA("PointLight") or instance:IsA("SpotLight") or instance:IsA("SurfaceLight") or instance:IsA("Highlight") then
		originalProps.Enabled = instance.Enabled
		instance.Enabled = visible and originalProps.Enabled or false
	end
	if not visible and next(originalProps) then
		stateStore[instance] = originalProps
	end
	for _, child in ipairs(instance:GetChildren()) do
		setVisibilityRecursive(child, visible, stateStore)
	end
end

local function handlePartTeleport(targetPartName, teleportDuration, triggerSource)
	if isPartTeleporting then print("Part teleport already in progress (requested by " .. triggerSource .. ")."); return end
	local player = LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local currentHumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if not currentHumanoidRootPart then warn("HumanoidRootPart not found (" .. triggerSource .. ")."); return end

	print(triggerSource .. " action triggered, searching for parts named:", targetPartName)
	isPartTeleporting = true
	originalStateData = {}
	local partsToTeleport = {}
	local foundParts = false

	for _, descendant in ipairs(Workspace:GetDescendants()) do
		if descendant:IsA("BasePart") and descendant.Name == targetPartName then
			table.insert(partsToTeleport, descendant)
			originalStateData[descendant] = {
				main = { CFrame = descendant.CFrame, Anchored = descendant.Anchored, CanCollide = descendant.CanCollide },
				children = {}
			}
			foundParts = true
		end
	end

	if foundParts then
		print("Found", #partsToTeleport, "parts via " .. triggerSource .. ". Teleporting them...")
		local targetCFrame = currentHumanoidRootPart.CFrame

		for _, part in ipairs(partsToTeleport) do
			if part and part.Parent and originalStateData[part] then
				part.Anchored = true
				part.CanCollide = false
				if targetPartName == TARGET_PART_NAME_E and triggerSource ~= "H Detection" then
					setVisibilityRecursive(part, false, originalStateData[part].children)
				end
				part.CFrame = targetCFrame
			end
		end

		task.wait(teleportDuration)
		print("Returning parts triggered by " .. triggerSource .. "...")

		for _, part in ipairs(partsToTeleport) do
			if part and part.Parent and originalStateData[part] then
				local originalMainData = originalStateData[part].main
				local originalChildrenData = originalStateData[part].children

				part.CFrame = originalMainData.CFrame
				part.Anchored = originalMainData.Anchored
				part.CanCollide = originalMainData.CanCollide

				if targetPartName == TARGET_PART_NAME_E and triggerSource ~= "H Detection" then
					for instance, props in pairs(originalChildrenData) do
						if instance and instance.Parent then
							for propName, originalValue in pairs(props) do
								pcall(function() instance[propName] = originalValue end)
							end
						end
					end
                    if originalChildrenData[part] and originalChildrenData[part].Transparency then
                        pcall(function() part.Transparency = originalChildrenData[part].Transparency end)
                    elseif originalStateData[part] and originalStateData[part].children[part] then
                         pcall(function() part.Transparency = originalStateData[part].children[part].Transparency end)
                    else
                         pcall(function() part.Transparency = 0 end)
                    end
				end
			end
		end
		print("Parts return complete for " .. triggerSource .. ".")
	else
		print("No parts found with the name '" .. targetPartName .. "' for trigger " .. triggerSource)
	end

	isPartTeleporting = false
	originalStateData = {}
end

local function teleportPlayerToCoords(targetPosition, triggerSource)
	local player = LocalPlayer
	local character = player.Character
	if not character then warn("Player character not found (" .. triggerSource .. ")."); return end
	local currentHumanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if not currentHumanoidRootPart then warn("HumanoidRootPart not found (" .. triggerSource .. ")."); return end

	print(triggerSource .. " action triggered, teleporting player to:", targetPosition)
	currentHumanoidRootPart.CFrame = CFrame.new(targetPosition)
end


local function updateAntiFallStatusLabel()
	if antiFallStatusLabelRef then
		if isAntiFallEnabled then
			antiFallStatusLabelRef.Text = "Anti-Fall: Enabled"
			antiFallStatusLabelRef.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			antiFallStatusLabelRef.Text = "Anti-Fall: Disabled"
			antiFallStatusLabelRef.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
	end
end
local function updateGFuncStatusLabel()
	if gFuncStatusLabelRef then
		if isGFuncEnabled then
			gFuncStatusLabelRef.Text = "Troll Detect: Enabled"
			gFuncStatusLabelRef.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			gFuncStatusLabelRef.Text = "Troll Detect: Disabled"
			gFuncStatusLabelRef.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
	end
end
local function updateHFuncStatusLabel()
	if hFuncStatusLabelRef then
		if isHFuncEnabled then
			hFuncStatusLabelRef.Text = "Other Detect: Enabled"
			hFuncStatusLabelRef.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			hFuncStatusLabelRef.Text = "Other Detect: Disabled"
			hFuncStatusLabelRef.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
	end
end
local function updateFlyStatusLabel()
	if flyStatusLabelRef then
		if FLYING then
			flyStatusLabelRef.Text = "Fly: Enabled"
			flyStatusLabelRef.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			flyStatusLabelRef.Text = "Fly: Disabled"
			flyStatusLabelRef.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
	end
end
local function updatePlatformStatusLabel()
	if platformStatusLabelRef then
		if isPlatformVisible then
			platformStatusLabelRef.Text = "Platform: Enabled"
			platformStatusLabelRef.TextColor3 = Color3.fromRGB(0, 255, 0)
		else
			platformStatusLabelRef.Text = "Platform: Disabled"
			platformStatusLabelRef.TextColor3 = Color3.fromRGB(255, 0, 0)
		end
	end
end

local function updateAntiFallMobileButton()
	if antiFallButtonRef then
		if isAntiFallEnabled then
			antiFallButtonRef.Text = "F: AntiFall ON"
			antiFallButtonRef.BackgroundColor3 = Color3.fromRGB(50, 180, 50)
			antiFallButtonRef.TextColor3 = Color3.fromRGB(255, 255, 255)
		else
			antiFallButtonRef.Text = "F: AntiFall OFF"
			antiFallButtonRef.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
			antiFallButtonRef.TextColor3 = Color3.fromRGB(220, 220, 220)
		end
	end
end
local function updateGFuncMobileButton()
	if gFuncButtonRef then
		if isGFuncEnabled then
			gFuncButtonRef.Text = "G: Troll Detect ON"
			gFuncButtonRef.BackgroundColor3 = Color3.fromRGB(50, 180, 50)
			gFuncButtonRef.TextColor3 = Color3.fromRGB(255, 255, 255)
		else
			gFuncButtonRef.Text = "G: Troll Detect OFF"
			gFuncButtonRef.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
			gFuncButtonRef.TextColor3 = Color3.fromRGB(220, 220, 220)
		end
	end
end
local function updateHFuncMobileButton()
	if hFuncButtonRef then
		if isHFuncEnabled then
			hFuncButtonRef.Text = "H: Other Detect ON"
			hFuncButtonRef.BackgroundColor3 = Color3.fromRGB(50, 180, 50)
			hFuncButtonRef.TextColor3 = Color3.fromRGB(255, 255, 255)
		else
			hFuncButtonRef.Text = "H: Other Detect OFF"
			hFuncButtonRef.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
			hFuncButtonRef.TextColor3 = Color3.fromRGB(220, 220, 220)
		end
	end
end
local function updateFlyMobileButton()
	if flyButtonRef then
		if FLYING then
			flyButtonRef.Text = "X: Fly ON"
			flyButtonRef.BackgroundColor3 = Color3.fromRGB(50, 180, 50)
			flyButtonRef.TextColor3 = Color3.fromRGB(255, 255, 255)
		else
			flyButtonRef.Text = "X: Fly OFF"
			flyButtonRef.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
			flyButtonRef.TextColor3 = Color3.fromRGB(220, 220, 220)
		end
	end
end
local function updatePlatformMobileButton()
	if platformButtonRef then
		if isPlatformVisible then
			platformButtonRef.Text = "P: Platform ON"
			platformButtonRef.BackgroundColor3 = Color3.fromRGB(50, 180, 50)
			platformButtonRef.TextColor3 = Color3.fromRGB(255, 255, 255)
		else
			platformButtonRef.Text = "P: Platform OFF"
			platformButtonRef.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
			platformButtonRef.TextColor3 = Color3.fromRGB(220, 220, 220)
		end
	end
end


local function toggleAntiFall()
	isAntiFallEnabled = not isAntiFallEnabled
	print("Anti-Fall Toggled:", isAntiFallEnabled and "ON" or "OFF")
	updateAntiFallStatusLabel()
	updateAntiFallMobileButton()
end
local function toggleGFunc()
	isGFuncEnabled = not isGFuncEnabled
	print("Player Detection (G -> Troll) Toggled:", isGFuncEnabled and "ON" or "OFF")
	updateGFuncStatusLabel()
	updateGFuncMobileButton()
	if gVisualizerPartRef then gVisualizerPartRef.Visible = isGFuncEnabled end
    print("DEBUG: isGFuncEnabled set to:", isGFuncEnabled)
end
local function toggleHFunc()
	isHFuncEnabled = not isHFuncEnabled
	print("Player Detection (H -> Other) Toggled:", isHFuncEnabled and "ON" or "OFF")
	updateHFuncStatusLabel()
	updateHFuncMobileButton()
	if hVisualizerPartRef then hVisualizerPartRef.Visible = isHFuncEnabled end
end

local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
local SPEED = 0
local flyBG = nil
local flyBV = nil

local function NOFLY()
	FLYING = false
	if flyKeyDownConnection then flyKeyDownConnection:Disconnect(); flyKeyDownConnection = nil end
	if flyKeyUpConnection then flyKeyUpConnection:Disconnect(); flyKeyUpConnection = nil end
	local currentRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
	if currentRootPart then
		if flyBG and flyBG.Parent == currentRootPart then flyBG:Destroy() end
		if flyBV and flyBV.Parent == currentRootPart then flyBV:Destroy() end
	end
	flyBG = nil
	flyBV = nil
	if Humanoid then Humanoid.PlatformStand = false end
	pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
	print("IY Fly Disabled")
end

local function sFLY(vfly)
	if FLYING then NOFLY() end
	wait()
	if not Character or not Humanoid or not HumanoidRootPart then print("Cannot start fly: Character components missing."); return end

	FLYING = true
	local T = HumanoidRootPart

	if flyBG and flyBG.Parent then flyBG:Destroy() end
	if flyBV and flyBV.Parent then flyBV:Destroy() end

	flyBG = Instance.new('BodyGyro')
	flyBG.P = 9e4
	flyBG.Parent = T
	flyBG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
	flyBG.cframe = T.CFrame

	flyBV = Instance.new('BodyVelocity')
	flyBV.Parent = T
	flyBV.velocity = Vector3.new(0, 0, 0)
	flyBV.maxForce = Vector3.new(9e9, 9e9, 9e9)

	CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	SPEED = 0

	task.spawn(function()
		local flyLoopActive = true
		local connection = RunService.Heartbeat:Connect(function()
			if not FLYING or not flyBV or not flyBV.Parent or not flyBG or not flyBG.Parent then
				flyLoopActive = false
				return
			end
			if Humanoid then Humanoid.PlatformStand = true end

			if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
				SPEED = 50
			elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
				SPEED = 0
			end

			local currentSpeed = (vfly and vehicleflyspeed or iyflyspeed)

			if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
				local camFrame = workspace.CurrentCamera.CFrame
				local lookVector = camFrame.lookVector
				local rightVector = camFrame.rightVector

				local moveDir = (lookVector * (CONTROL.F + CONTROL.B)) + (rightVector * (CONTROL.L + CONTROL.R))
				local verticalDir = Vector3.new(0, (CONTROL.Q + CONTROL.E), 0)

				flyBV.velocity = (moveDir + verticalDir) * SPEED * currentSpeed
				lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}

			elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
				local camFrame = workspace.CurrentCamera.CFrame
				local lookVector = camFrame.lookVector
				local rightVector = camFrame.rightVector
				local moveDir = (lookVector * (lCONTROL.F + lCONTROL.B)) + (rightVector * (lCONTROL.L + lCONTROL.R))
				flyBV.velocity = Vector3.new(0,0,0)
				SPEED = 0
			else
				flyBV.velocity = Vector3.new(0, 0, 0)
			end
			flyBG.cframe = workspace.CurrentCamera.CFrame
		end)

		while flyLoopActive do wait() end
		connection:Disconnect()
		print("Fly Heartbeat loop stopped.")
	end)

	if flyKeyDownConnection then flyKeyDownConnection:Disconnect() end
	flyKeyDownConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed or not FLYING then return end
		local KEY = input.KeyCode.Name:lower()
		if KEY == 'w' then CONTROL.F = 1
		elseif KEY == 's' then CONTROL.B = -1
		elseif KEY == 'a' then CONTROL.L = -1
		elseif KEY == 'd' then CONTROL.R = 1
		elseif QEfly and KEY == 'e' then CONTROL.Q = 1
		elseif QEfly and KEY == 'q' then CONTROL.E = -1
		end
	end)

	if flyKeyUpConnection then flyKeyUpConnection:Disconnect() end
	flyKeyUpConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
		if not FLYING then return end
		local KEY = input.KeyCode.Name:lower()
		if KEY == 'w' then CONTROL.F = 0
		elseif KEY == 's' then CONTROL.B = 0
		elseif KEY == 'a' then CONTROL.L = 0
		elseif KEY == 'd' then CONTROL.R = 0
		elseif KEY == 'e' then CONTROL.Q = 0
		elseif KEY == 'q' then CONTROL.E = 0
		end
	end)

	print("IY Fly Enabled (Keyboard)")
end

local function mobilefly()
	if FLYING then NOFLY() end
	wait()
	if not Character or not Humanoid or not HumanoidRootPart then print("Cannot start mobile fly: Character components missing."); return end

	FLYING = true
	local T = HumanoidRootPart
	local camera = Workspace.CurrentCamera
	local v3zero = Vector3.new(0, 0, 0)
	local v3inf = Vector3.new(9e9, 9e9, 9e9)

	if flyBG and flyBG.Parent then flyBG:Destroy() end
	if flyBV and flyBV.Parent then flyBV:Destroy() end

	flyBV = Instance.new("BodyVelocity")
	flyBV.Name = "IYMobileFlyBV"
	flyBV.Parent = T
	flyBV.MaxForce = v3inf
	flyBV.Velocity = v3zero

	flyBG = Instance.new("BodyGyro")
	flyBG.Name = "IYMobileFlyBG"
	flyBG.Parent = T
	flyBG.MaxTorque = v3inf
	flyBG.P = 10000
	flyBG.D = 500

	if flyRenderStepConnection then flyRenderStepConnection:Disconnect(); flyRenderStepConnection = nil end

	flyRenderStepConnection = RunService.RenderStepped:Connect(function()
		if not FLYING or not Character or not Humanoid or not T or not T.Parent or not flyBV or not flyBV.Parent or not flyBG or not flyBG.Parent then
			if flyRenderStepConnection then flyRenderStepConnection:Disconnect(); flyRenderStepConnection = nil end
			unmobilefly()
			return
		end

		Humanoid.PlatformStand = true
		flyBG.CFrame = camera.CFrame

		local direction = Humanoid.MoveDirection
		local currentSpeed = iyflyspeed * 50

		if direction.Magnitude > 0.01 then
			local lookVector = camera.CFrame.LookVector
			local rightVector = camera.CFrame.RightVector
			local moveDir = (lookVector * -direction.Z) + (rightVector * direction.X)
			flyBV.Velocity = moveDir.Unit * currentSpeed
		else
			flyBV.Velocity = v3zero
		end
	end)

	if flyCharacterAddedConnection then flyCharacterAddedConnection:Disconnect(); flyCharacterAddedConnection = nil end
	flyCharacterAddedConnection = LocalPlayer.CharacterAdded:Connect(function(newChar)
		Character = newChar
		Humanoid = newChar:WaitForChild("Humanoid", 5)
		HumanoidRootPart = newChar:WaitForChild("HumanoidRootPart", 5)
		T = HumanoidRootPart
		if FLYING then
			task.wait(0.5)
			if T and T.Parent then
				if flyBG and flyBG.Parent then flyBG:Destroy() end
				if flyBV and flyBV.Parent then flyBV:Destroy() end
				flyBV = Instance.new("BodyVelocity")
				flyBV.Name = "IYMobileFlyBV"
				flyBV.Parent = T
				flyBV.MaxForce = v3inf
				flyBV.Velocity = v3zero
				flyBG = Instance.new("BodyGyro")
				flyBG.Name = "IYMobileFlyBG"
				flyBG.Parent = T
				flyBG.MaxTorque = v3inf
				flyBG.P = 10000
				flyBG.D = 500
				print("Mobile fly movers re-created on respawn.")
			else
				warn("Failed to re-create mobile fly movers on respawn: RootPart not found.")
				unmobilefly()
			end
		end
	end)

	print("IY Fly Enabled (Mobile)")
end

local function unmobilefly()
	FLYING = false
	if flyRenderStepConnection then flyRenderStepConnection:Disconnect(); flyRenderStepConnection = nil end
	if flyCharacterAddedConnection then flyCharacterAddedConnection:Disconnect(); flyCharacterAddedConnection = nil end

	local currentRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
	if currentRootPart then
		local bv = currentRootPart:FindFirstChild("IYMobileFlyBV")
		local bg = currentRootPart:FindFirstChild("IYMobileFlyBG")
		if bv then bv:Destroy() end
		if bg then bg:Destroy() end
	end
	flyBG = nil
	flyBV = nil

	if Humanoid then Humanoid.PlatformStand = false end
	print("IY Mobile Fly Disabled")
end


local function toggleFly()
	FLYING = not FLYING
	print("Fly Toggled:", FLYING and "ON" or "OFF")
	if FLYING then
		if UserInputService.TouchEnabled then
			mobilefly()
		else
			sFLY()
		end
	else
		if UserInputService.TouchEnabled then
			unmobilefly()
		else
			NOFLY()
		end
	end
	updateFlyStatusLabel()
	updateFlyMobileButton()
end


local function createPlatform()
	if platformPartRef and platformPartRef.Parent then
        print("Platform already exists.")
        if platformPartRef.Position ~= TARGET_POSITION_G then
            print("Updating existing platform position.")
            platformPartRef.Position = TARGET_POSITION_G
        end
        return
    end
    if platformPartRef then platformPartRef = nil end

	print("Attempting to create Platform...")
	platformPartRef = Instance.new("Part")
	platformPartRef.Name = "FloatingPlatform_Scripted"
	platformPartRef.Size = PLATFORM_SIZE
	platformPartRef.Position = TARGET_POSITION_G
	platformPartRef.Color = PLATFORM_COLOR
	platformPartRef.Material = Enum.Material.Plastic
	platformPartRef.Anchored = PLATFORM_ANCHORED
	platformPartRef.Transparency = isPlatformVisible and PLATFORM_TRANSPARENCY_VISIBLE or PLATFORM_TRANSPARENCY_HIDDEN
	platformPartRef.CanCollide = isPlatformVisible and PLATFORM_CAN_COLLIDE or false
    platformPartRef.CanTouch = isPlatformVisible
    platformPartRef.CanQuery = isPlatformVisible
	platformPartRef.Parent = Workspace
	print("Platform Created in Workspace at Y:", TARGET_POSITION_G.Y, "Initial State:", isPlatformVisible and "VISIBLE" or "HIDDEN")
end

local function togglePlatform()
    print("Toggle Platform called. Current state (before toggle):", isPlatformVisible)
	isPlatformVisible = not isPlatformVisible
    print("Platform state toggled to:", isPlatformVisible and "VISIBLE" or "HIDDEN")

	if not platformPartRef or not platformPartRef.Parent then
        warn("Platform part reference lost or destroyed. Recreating...")
		createPlatform()
	elseif platformPartRef.Position ~= TARGET_POSITION_G then
        print("Platform exists but position is outdated. Updating position to Y:", TARGET_POSITION_G.Y)
        platformPartRef.Position = TARGET_POSITION_G
    end

	if platformPartRef and platformPartRef.Parent then
        local targetTransparency = isPlatformVisible and PLATFORM_TRANSPARENCY_VISIBLE or PLATFORM_TRANSPARENCY_HIDDEN
        local targetCollide = isPlatformVisible and PLATFORM_CAN_COLLIDE or false
        local targetTouch = isPlatformVisible
        local targetQuery = isPlatformVisible

		platformPartRef.Transparency = targetTransparency
		platformPartRef.CanCollide = targetCollide
        platformPartRef.CanTouch = targetTouch
        platformPartRef.CanQuery = targetQuery
        print("Platform properties updated: Transparency =", targetTransparency, "CanCollide =", targetCollide)
	else
        warn("Failed to find or create platform part to update properties.")
    end

	updatePlatformStatusLabel()
	updatePlatformMobileButton()
end


local function getOrCreateScreenGui()
	local screenGui = PlayerGui:FindFirstChild("TeleportControlsScreenGui")
	if not screenGui then
		screenGui = Instance.new("ScreenGui")
		screenGui.Name = "TeleportControlsScreenGui"
		screenGui.ResetOnSpawn = false
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		screenGui.DisplayOrder = 10
		screenGui.Parent = PlayerGui
	end
	return screenGui
end

local function createStatusLabelsUI()
	local screenGui = getOrCreateScreenGui()
	local children = screenGui:GetChildren()
	for _, child in ipairs(children) do
		if child.Name:match("StatusLabel$") or child.Name:match("Status$") then
			child:Destroy()
		end
	end

	local guiInset = GuiService:GetGuiInset()
	local topPadding = 5
	local labelHeight = 20
	local labelWidth = 150
	local labelSpacing = 5

	local function createBaseStatusLabel(name, posY)
		local label = Instance.new("TextLabel")
		label.Name = name
		label.Size = UDim2.new(0, labelWidth, 0, labelHeight)
		label.Position = UDim2.new(1, -labelWidth - 10, 0, posY)
		label.BackgroundTransparency = 0.8
		label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		label.BorderSizePixel = 0
		label.Font = Enum.Font.SourceSansBold
		label.TextSize = 14
		label.TextXAlignment = Enum.TextXAlignment.Center
		label.Parent = screenGui
		return label
	end

	local currentY = topPadding + guiInset.Y
	antiFallStatusLabelRef = createBaseStatusLabel("AntiFallStatusLabel", currentY); updateAntiFallStatusLabel()
	currentY = currentY + labelHeight + labelSpacing
	gFuncStatusLabelRef = createBaseStatusLabel("GStatusLabel", currentY); updateGFuncStatusLabel()
	currentY = currentY + labelHeight + labelSpacing
	hFuncStatusLabelRef = createBaseStatusLabel("HStatusLabel", currentY); updateHFuncStatusLabel()
	currentY = currentY + labelHeight + labelSpacing
	flyStatusLabelRef = createBaseStatusLabel("FlyStatusLabel", currentY); updateFlyStatusLabel()
	currentY = currentY + labelHeight + labelSpacing
	platformStatusLabelRef = createBaseStatusLabel("PlatformStatusLabel", currentY); updatePlatformStatusLabel()

	print("Status Labels UI created/updated.")
end

local function createKeybindsLabelUI()
	local screenGui = getOrCreateScreenGui()
	local oldLabel = screenGui:FindFirstChild("KeybindsLabel")
	if oldLabel then oldLabel:Destroy() end

	local guiInset = GuiService:GetGuiInset()
	local topPadding = 5
	local labelHeight = 110
	local labelWidth = 150

	local statusBlockBottomY = topPadding + guiInset.Y
    if platformStatusLabelRef and platformStatusLabelRef.Parent then
		statusBlockBottomY = platformStatusLabelRef.Position.Y.Offset + platformStatusLabelRef.AbsoluteSize.Y
	elseif flyStatusLabelRef and flyStatusLabelRef.Parent then
        statusBlockBottomY = flyStatusLabelRef.Position.Y.Offset + flyStatusLabelRef.AbsoluteSize.Y
    elseif hFuncStatusLabelRef and hFuncStatusLabelRef.Parent then
		statusBlockBottomY = hFuncStatusLabelRef.Position.Y.Offset + hFuncStatusLabelRef.AbsoluteSize.Y
	elseif gFuncStatusLabelRef and gFuncStatusLabelRef.Parent then
		statusBlockBottomY = gFuncStatusLabelRef.Position.Y.Offset + gFuncStatusLabelRef.AbsoluteSize.Y
	elseif antiFallStatusLabelRef and antiFallStatusLabelRef.Parent then
		statusBlockBottomY = antiFallStatusLabelRef.Position.Y.Offset + antiFallStatusLabelRef.AbsoluteSize.Y
	end

	local keybindsLabelYOffset = statusBlockBottomY + 10

	local keybindsLabel = Instance.new("TextLabel")
	keybindsLabel.Name = "KeybindsLabel"
	keybindsLabel.Size = UDim2.new(0, labelWidth, 0, labelHeight)
	keybindsLabel.Position = UDim2.new(1, -labelWidth - 10, 0, keybindsLabelYOffset)
	keybindsLabel.BackgroundTransparency = 0.8
	keybindsLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	keybindsLabel.BorderSizePixel = 0
	keybindsLabel.Font = Enum.Font.SourceSans
	keybindsLabel.TextSize = 12
	keybindsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
	keybindsLabel.TextWrapped = true
	keybindsLabel.TextXAlignment = Enum.TextXAlignment.Left
	keybindsLabel.TextYAlignment = Enum.TextYAlignment.Top
	keybindsLabel.Text = string.format(
        "%s: other buttons\n%s: Troll button\n%s: TP To Location\n%s: Toggle AntiFall\n%s: Toggle Troll Detect\n%s: Toggle Other Detect\n%s: Toggle Fly\n%s: Toggle Platform",
        TRIGGER_KEY_Q.Name, TRIGGER_KEY_E.Name, TRIGGER_KEY_R.Name, TRIGGER_KEY_F.Name,
        TRIGGER_KEY_G.Name, TRIGGER_KEY_H.Name, TRIGGER_KEY_FLY.Name, TRIGGER_KEY_PLATFORM.Name
    )
	keybindsLabel.Parent = screenGui
	keybindsLabelRef = keybindsLabel
	print("Keybinds Info UI created/updated.")
end

local function createMobileUI()
	local screenGui = getOrCreateScreenGui()
	local oldFrame = screenGui:FindFirstChild("ButtonFrame")
	if oldFrame then oldFrame:Destroy() end
	local oldToggle = screenGui:FindFirstChild("ToggleButton")
	if oldToggle then oldToggle:Destroy() end

	local guiInset = GuiService:GetGuiInset()
	local topPadding = 5

	local buttonWidth = 80
	local buttonHeight = 35
	local buttonPadding = 5
	local buttonsPerRow = 4
	local numRows = 2

	local frameWidth = (buttonWidth * buttonsPerRow) + (buttonPadding * (buttonsPerRow - 1))
	local frameHeight = (buttonHeight * numRows) + (buttonPadding * (numRows - 1))

	local buttonFrame = Instance.new("Frame")
	buttonFrame.Name = "ButtonFrame"
	buttonFrame.BackgroundTransparency = 1
	buttonFrame.Size = UDim2.new(0, frameWidth, 0, frameHeight)
	buttonFrame.Visible = true
	buttonFrame.Parent = screenGui

	local function createMobileButton(name, text, rowIndex, colIndex, color, borderColor, clickFunction)
		local button = Instance.new("TextButton")
		button.Name = name
		button.Text = text
		button.Size = UDim2.new(0, buttonWidth, 0, buttonHeight)
		local posX = (buttonWidth + buttonPadding) * colIndex
		local posY = (buttonHeight + buttonPadding) * rowIndex
		button.Position = UDim2.new(0, posX, 0, posY)
		button.BackgroundColor3 = color
		button.BorderColor3 = borderColor
		button.TextColor3 = Color3.fromRGB(255, 255, 255)
		button.Font = Enum.Font.SourceSansBold
		button.TextSize = 13
		button.TextWrapped = true
		button.Parent = buttonFrame
		if clickFunction then
			button.MouseButton1Click:Connect(clickFunction)
		end
		return button
	end

	local buttonQ = createMobileButton("TeleportButtonQ", "Q: other buttons", 0, 0, Color3.fromRGB(80, 80, 200), Color3.fromRGB(20, 20, 50), function() handlePartTeleport(TARGET_PART_NAME_Q, TELEPORT_DURATION_Q, "Button Q") end)
	local buttonE = createMobileButton("TeleportButtonE", "E: Troll button", 0, 1, Color3.fromRGB(200, 80, 80), Color3.fromRGB(50, 20, 20), function() handlePartTeleport(TARGET_PART_NAME_E, TELEPORT_DURATION_E, "Button E") end)
	local buttonR = createMobileButton("TeleportButtonR", "R: TP Loc", 0, 2, Color3.fromRGB(80, 200, 80), Color3.fromRGB(20, 50, 20), function() teleportPlayerToCoords(TARGET_POSITION_R, "Button R") end)
	antiFallButtonRef = createMobileButton("AntiFallButton", "F: AntiFall", 0, 3, Color3.fromRGB(200, 50, 50), Color3.fromRGB(30, 30, 30), toggleAntiFall)

	gFuncButtonRef = createMobileButton("DetectButtonG", "G: Troll Detect", 1, 0, Color3.fromRGB(200, 50, 50), Color3.fromRGB(30, 30, 30), toggleGFunc)
	hFuncButtonRef = createMobileButton("DetectButtonH", "H: Other Detect", 1, 1, Color3.fromRGB(200, 50, 50), Color3.fromRGB(30, 30, 30), toggleHFunc)
	flyButtonRef = createMobileButton("FlyButton", "X: Fly", 1, 2, Color3.fromRGB(200, 50, 50), Color3.fromRGB(30, 30, 30), toggleFly)
	platformButtonRef = createMobileButton("PlatformButton", "P: Platform", 1, 3, Color3.fromRGB(200, 50, 50), Color3.fromRGB(30, 30, 30), togglePlatform)

	local toggleButton = Instance.new("TextButton")
	toggleButton.Name = "ToggleButton"
	toggleButton.Text = ">"
	toggleButton.Size = UDim2.new(0, 30, 0, buttonHeight)

	local lowestLabelY = topPadding + guiInset.Y
	if platformStatusLabelRef and platformStatusLabelRef.Parent then
		lowestLabelY = platformStatusLabelRef.Position.Y.Offset + platformStatusLabelRef.AbsoluteSize.Y
    elseif flyStatusLabelRef and flyStatusLabelRef.Parent then
        lowestLabelY = flyStatusLabelRef.Position.Y.Offset + flyStatusLabelRef.AbsoluteSize.Y
	elseif hFuncStatusLabelRef and hFuncStatusLabelRef.Parent then
		lowestLabelY = hFuncStatusLabelRef.Position.Y.Offset + hFuncStatusLabelRef.AbsoluteSize.Y
	elseif gFuncStatusLabelRef and gFuncStatusLabelRef.Parent then
		lowestLabelY = gFuncStatusLabelRef.Position.Y.Offset + gFuncStatusLabelRef.AbsoluteSize.Y
	elseif antiFallStatusLabelRef and antiFallStatusLabelRef.Parent then
		lowestLabelY = antiFallStatusLabelRef.Position.Y.Offset + antiFallStatusLabelRef.AbsoluteSize.Y
	end
	local toggleYOffset = lowestLabelY + 10

	toggleButton.Position = UDim2.new(1, -45, 0, toggleYOffset)
	toggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
	toggleButton.BorderColor3 = Color3.fromRGB(50, 50, 50)
	toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	toggleButton.Font = Enum.Font.SourceSansBold
	toggleButton.TextSize = 24
	toggleButton.AutoButtonColor = false
	toggleButton.Parent = screenGui
	uiToggleButtonRef = toggleButton

	local function updateFramePosition()
        task.wait()
		buttonFrame.Position = UDim2.new(
			toggleButton.Position.X.Scale, toggleButton.Position.X.Offset - buttonFrame.AbsoluteSize.X - 10,
			toggleButton.Position.Y.Scale, toggleButton.Position.Y.Offset
		)
	end

	updateFramePosition()
	updateAntiFallMobileButton()
	updateGFuncMobileButton()
	updateHFuncMobileButton()
	updateFlyMobileButton()
	updatePlatformMobileButton()

	local dragging = false
	local dragInput = nil
	local dragStart = nil
	local startPos = nil

	toggleButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = toggleButton.Position
			dragInput = input

			local connection
			connection = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					if dragging and (input.Position - dragStart).Magnitude < 5 then
						buttonFrame.Visible = not buttonFrame.Visible
						toggleButton.Text = buttonFrame.Visible and ">" or "<"
						if buttonFrame.Visible then
							updateFramePosition()
						end
					end
					dragging = false
					dragInput = nil
					if connection then connection:Disconnect() end
				end
			end)
		end
	end)

	toggleButton.InputChanged:Connect(function(input)
		if input == dragInput and dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			if (input.Position - dragStart).Magnitude >= 5 then
				local delta = input.Position - dragStart
				toggleButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
				updateFramePosition()
			end
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input == dragInput and dragging then
			dragging = false
			dragInput = nil
		end
	end)

	print("Mobile controls UI created/updated.")
end

local function hideInitialParts()
	print("Hiding initial Q parts...")
	local partsHidden = 0
	for _, descendant in ipairs(Workspace:GetDescendants()) do
		if descendant:IsA("BasePart") and descendant.Name == TARGET_PART_NAME_Q then
			setVisibilityRecursive(descendant, false, {})
			partsHidden = partsHidden + 1
		end
	end
	print("Finished hiding initial Q parts. Count:", partsHidden)
end

local function createDetectionVisualizers()
	if not gVisualizerPartRef or not gVisualizerPartRef.Parent then
        if gVisualizerPartRef then gVisualizerPartRef:Destroy() end
		local sphereG = Instance.new("Part")
		sphereG.Name = "G_DetectionZoneVisualizer"
		sphereG.Shape = Enum.PartType.Ball
		sphereG.Size = Vector3.new(DETECTION_RADIUS_G*2, DETECTION_RADIUS_G*2, DETECTION_RADIUS_G*2)
		sphereG.Position = DETECT_POSITION_G
		sphereG.Color = Color3.fromRGB(0, 255, 255)
		sphereG.Material = Enum.Material.ForceField
		sphereG.Transparency = 0.7
		sphereG.Anchored = true
		sphereG.CanCollide = false
		sphereG.CanTouch = false
		sphereG.CanQuery = false
		sphereG.Visible = isGFuncEnabled
		sphereG.Parent = Workspace
		gVisualizerPartRef = sphereG
		print("G Detection Visualizer Created at Y:", DETECT_POSITION_G.Y)
    elseif gVisualizerPartRef.Position ~= DETECT_POSITION_G then
        print("Updating G Visualizer position to Y:", DETECT_POSITION_G.Y)
        gVisualizerPartRef.Position = DETECT_POSITION_G
	end

	if not hVisualizerPartRef or not hVisualizerPartRef.Parent then
        if hVisualizerPartRef then hVisualizerPartRef:Destroy() end
		local sphereH = Instance.new("Part")
		sphereH.Name = "H_DetectionZoneVisualizer"
		sphereH.Shape = Enum.PartType.Ball
		sphereH.Size = Vector3.new(DETECTION_RADIUS_H*2, DETECTION_RADIUS_H*2, DETECTION_RADIUS_H*2)
		sphereH.Position = TARGET_POSITION_H
		sphereH.Color = Color3.fromRGB(255, 255, 0)
		sphereH.Material = Enum.Material.ForceField
		sphereH.Transparency = 0.7
		sphereH.Anchored = true
		sphereH.CanCollide = false
		sphereH.CanTouch = false
		sphereH.CanQuery = false
		sphereH.Visible = isHFuncEnabled
		sphereH.Parent = Workspace
		hVisualizerPartRef = sphereH
		print("H Detection Visualizer Created.")
	end

	LocalPlayer.CharacterRemoving:Connect(function(removedCharacter)
        print("CharacterRemoving event fired.")
		if gVisualizerPartRef and gVisualizerPartRef.Parent then gVisualizerPartRef:Destroy() end
        gVisualizerPartRef = nil
		if hVisualizerPartRef and hVisualizerPartRef.Parent then hVisualizerPartRef:Destroy() end
        hVisualizerPartRef = nil
		if platformPartRef and platformPartRef.Parent then platformPartRef:Destroy() end
        platformPartRef = nil
        if FLYING then
            if UserInputService.TouchEnabled then unmobilefly() else NOFLY() end
        end
        print("Cleaned up visualizers, platform, and fly state.")
	end)
end


RunService.RenderStepped:Connect(function(deltaTime)
	if isAntiFallEnabled then
		local currentTime = tick()
		if currentTime - lastAntiFallTime >= ANTI_FALL_COOLDOWN then
			local player = LocalPlayer
			local character = player.Character
			if character then
				local currentRootPart = character:FindFirstChild("HumanoidRootPart")
				if currentRootPart then
					if currentRootPart.Position.Y < ANTI_FALL_Y_THRESHOLD then
						print("Anti-Fall triggered!")
						teleportPlayerToCoords(TARGET_POSITION_R, "Anti-Fall")
						lastAntiFallTime = currentTime
					end
				end
			end
		end
	end
end)

local function detectNearbyPlayersAndTriggerE_Loop()
	while task.wait(0.1) do
		if isGFuncEnabled and not isPartTeleporting then
			local currentTime = tick()
			if currentTime - lastPlayerDetectTime_G >= PLAYER_DETECT_COOLDOWN_G then
				local localPlayer = LocalPlayer
				local localChar = localPlayer.Character
				if not localChar then continue end

				local foundTarget = false
				for _, player in ipairs(Players:GetPlayers()) do
					if player ~= localPlayer then
						local character = player.Character
						if character then
							local hrp = character:FindFirstChild("HumanoidRootPart")
							if hrp then
								local distance = (hrp.Position - DETECT_POSITION_G).Magnitude
								if distance <= DETECTION_RADIUS_G then
									print("DEBUG: Player '"..player.Name.."' detected near G (Dist: "..string.format("%.2f", distance).."). Triggering Troll button (E).")
									task.spawn(handlePartTeleport, TARGET_PART_NAME_E, TELEPORT_DURATION_E, "G Detection")
									lastPlayerDetectTime_G = currentTime
									foundTarget = true
									break
								end
                            end
                        end
					end
				end
            end
		end
	end
end

local function detectNearbyPlayersAndTriggerQ_Loop()
	while task.wait(0.1) do
		if isHFuncEnabled and not isPartTeleporting then
			local currentTime = tick()
			if currentTime - lastPlayerDetectTime_H >= PLAYER_DETECT_COOLDOWN_H then
				local localPlayer = LocalPlayer
				local localChar = localPlayer.Character
				if not localChar then continue end

				local foundTarget = false
				for _, player in ipairs(Players:GetPlayers()) do
					if player ~= localPlayer then
						local character = player.Character
						if character then
							local hrp = character:FindFirstChild("HumanoidRootPart")
							if hrp then
								local distance = (hrp.Position - TARGET_POSITION_H).Magnitude
								if distance <= DETECTION_RADIUS_H then
									print("Player '"..player.Name.."' detected near H (Dist: "..string.format("%.2f", distance).."). Triggering other buttons (Q).")
									task.spawn(handlePartTeleport, TARGET_PART_NAME_Q, TELEPORT_DURATION_Q, "H Detection")
									lastPlayerDetectTime_H = currentTime
									foundTarget = true
									break
								end
							end
						end
					end
				end
			end
		end
	end
end

local uiSuccess, uiError = pcall(function()
    print("Initializing UI and World Objects...")
	createStatusLabelsUI()
	if not UserInputService.TouchEnabled then
		createKeybindsLabelUI()
	end
	if UserInputService.TouchEnabled then
		createMobileUI()
	end
	createDetectionVisualizers()
    createPlatform()
    print("Initialization complete.")
end)

if not uiSuccess then
	warn("Error during UI/World Initialization:", uiError)
end

task.spawn(detectNearbyPlayersAndTriggerE_Loop)
task.spawn(detectNearbyPlayersAndTriggerQ_Loop)
print("Detection loops started.")

local inputSuccess, inputError = pcall(function()
    if flyKeyDownConnection then flyKeyDownConnection:Disconnect(); flyKeyDownConnection = nil end
    if flyKeyUpConnection then flyKeyUpConnection:Disconnect(); flyKeyUpConnection = nil end

	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
		if gameProcessedEvent or (FLYING and input.KeyCode ~= TRIGGER_KEY_FLY) then return end

		local keyCode = input.KeyCode

		if keyCode == TRIGGER_KEY_Q then
            print("Q Key Pressed (other buttons)")
			pcall(handlePartTeleport, TARGET_PART_NAME_Q, TELEPORT_DURATION_Q, "Q Key")
		elseif keyCode == TRIGGER_KEY_E then
            print("E Key Pressed (Troll button)")
			pcall(handlePartTeleport, TARGET_PART_NAME_E, TELEPORT_DURATION_E, "E Key")
		elseif keyCode == TRIGGER_KEY_R then
            print("R Key Pressed")
			pcall(teleportPlayerToCoords, TARGET_POSITION_R, "R Key")
		elseif keyCode == TRIGGER_KEY_F then
            print("F Key Pressed")
			pcall(toggleAntiFall)
		elseif keyCode == TRIGGER_KEY_G then
            print("G Key Pressed")
			pcall(toggleGFunc)
		elseif keyCode == TRIGGER_KEY_H then
            print("H Key Pressed")
			pcall(toggleHFunc)
		elseif keyCode == TRIGGER_KEY_FLY then
            print("X Key Pressed")
            pcall(toggleFly)
        elseif keyCode == TRIGGER_KEY_PLATFORM then
            print("P Key Pressed")
            pcall(togglePlatform)
		end
	end)
end)

if not inputSuccess then
	warn("Error connecting Input Handler:", inputError)
else
	print("Teleporting, Anti-Fall, Player Detect, Fly & Platform script input handler loaded. Keys: Q, E, R, F, G, H, X, P.")
end

LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    print("CharacterAdded event fired. Updating references and recreating objects.")
    task.wait(0.2)
    Character = newCharacter
    local success
    success = pcall(function() Humanoid = newCharacter:WaitForChild("Humanoid", 5) end)
    if not success or not Humanoid then warn("Failed to get Humanoid on respawn.") return end
    success = pcall(function() HumanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart", 5) end)
    if not success or not HumanoidRootPart then warn("Failed to get HumanoidRootPart on respawn.") return end

    print("Character references updated.")

    if FLYING then
        print("Re-applying fly state after respawn.")
        task.wait(0.5)
        if UserInputService.TouchEnabled then
            mobilefly()
        else
            sFLY()
        end
    end
    createDetectionVisualizers()
    createPlatform()
    createStatusLabelsUI()
    if not UserInputService.TouchEnabled then createKeybindsLabelUI() end
    if UserInputService.TouchEnabled then createMobileUI() end
    print("Respawn setup complete.")
end)
